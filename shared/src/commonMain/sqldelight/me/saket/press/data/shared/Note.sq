import com.soywiz.klock.DateTime;
import me.saket.press.shared.db.NoteId;
import me.saket.press.shared.sync.SyncState;

CREATE TABLE note (
  localId INTEGER PRIMARY KEY AUTOINCREMENT,
  id TEXT AS NoteId NOT NULL,
  content TEXT NOT NULL,
  createdAt TEXT AS DateTime NOT NULL,
  updatedAt TEXT AS DateTime NOT NULL,
  isArchived INTEGER AS Boolean NOT NULL DEFAULT 0,
  isPendingDeletion INTEGER AS Boolean NOT NULL DEFAULT 0,
  syncState TEXT AS SyncState NOT NULL DEFAULT 'PENDING'
);

CREATE INDEX note_content ON note(content);

-- Mark as pending-sync when notes are updated.
CREATE TRIGGER pending_sync_on_content_update
AFTER UPDATE OF content ON note
BEGIN
	UPDATE note
  SET syncState = 'PENDING'
  WHERE id = new.id;
END;

CREATE TRIGGER pending_sync_on_archived_update
AFTER UPDATE OF isArchived ON note
BEGIN
	UPDATE note
  SET syncState = 'PENDING'
  WHERE id = new.id;
END;

CREATE TRIGGER pending_sync_on_deletion_update
AFTER UPDATE OF isPendingDeletion ON note
BEGIN
	UPDATE note
  SET syncState = 'PENDING'
  WHERE id = new.id;
END;

visibleNotes:
SELECT *
FROM note
WHERE isPendingDeletion IS 0 AND isArchived IS 0
ORDER BY updatedAt DESC;

allNotes:
SELECT *
FROM note
ORDER BY updatedAt DESC;

pendingSyncNotes:
SELECT *
FROM note
WHERE syncState = 'PENDING'
ORDER BY updatedAt ASC;

notesInState:
SELECT *
FROM note
WHERE syncState = ?
ORDER BY updatedAt ASC;

note:
SELECT *
FROM note
WHERE id = ?;

insert:
INSERT INTO note(id, content, createdAt, updatedAt)
VALUES (?, ?, ?, ?);

updateContent:
UPDATE note
SET content = :content, updatedAt = ?
WHERE id = ? AND TRIM(content) != TRIM(:content);

updateSyncState:
UPDATE note
SET syncState = ?
WHERE id IN :ids;

swapSyncStates:
UPDATE note
SET syncState = :new
WHERE syncState IN :old;

markAsArchived:
UPDATE note
SET isArchived = 1, updatedAt = ?
WHERE id = ? AND isArchived != 1;

setArchived:
UPDATE note
SET isArchived = :isArchived, updatedAt = ?
WHERE id = ? AND isArchived != :isArchived;

markAsPendingDeletion:
UPDATE note
SET isPendingDeletion = 1
WHERE id = ? AND isPendingDeletion != 1;

deleteNote:
DELETE
FROM note
WHERE id = ?
  -- to safe-guard against mistakes:
  AND isPendingDeletion = 1
  AND syncState = 'IN_FLIGHT';

-- Test functions
testInsert:
INSERT INTO note
VALUES ?;
